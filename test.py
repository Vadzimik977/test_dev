import re
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from data_test import utils_db, config

app = Client(
    "my_bot",
    api_id=config.API_ID,
    api_hash=config.API_HASH,
    bot_token=config.BOT_TOKEN
)

@app.on_message(filters.command("start"))
def start(client, message):
    user_id = message.from_user.id
    if utils_db.user_id_in_db(user_id):
        keyboard = ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
            ],
            resize_keyboard=True
        )
        message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –Ω–æ–≤—ã–π –±–æ—Ç. ü§ñ", reply_markup=keyboard)
    else:
        utils_db.add_user(user_id)
        utils_db.update_stage(user_id, "get_name")
        message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")

# profile info
def my_profile(client, message):
    user_id = message.from_user.id
    result = utils_db.get_profile_info(user_id)
    if result:
        name = result['name']
        username = result['user_name']
        message.reply_text(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {name}\n–õ–æ–≥–∏–Ω: {username}")
    else:
        message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# Text handler & registration info

@app.on_message(filters.text & ~filters.command(["start", "help", "add", "list"]))
def handle_message(client, message):
    user_id = message.from_user.id
    stage = utils_db.get_stage(user_id)
    if stage == "get_name":
        name = message.text
        utils_db.add_name(user_id, name)
        utils_db.update_stage(user_id, "get_username")
        message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω.")
    elif stage == "get_username":
        username = message.text
        if utils_db.username_exists(username):
            message.reply_text("–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω.")
        else:
            utils_db.add_username(user_id, username)
            utils_db.update_stage(user_id, None)

            # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é
            keyboard = ReplyKeyboardMarkup(
                [
                    [KeyboardButton("–ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
                ],
                resize_keyboard=True
            )
            message.reply_text(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}! üéâ", reply_markup=keyboard)
    elif stage == "get_task_title":
        task_title = message.text
        utils_db.update_temp_task(user_id, task_title=task_title)
        utils_db.update_stage(user_id, "get_task_description")
        message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
    elif stage == "get_task_description":
        task_description = message.text
        temp_task = utils_db.get_temp_task(user_id)
        if temp_task:
            unique_id = temp_task['unique_id']
            utils_db.add_task(user_id, temp_task['task_title'], task_description, unique_id)
            utils_db.update_stage(user_id, None)
            utils_db.clear_temp_task(user_id)
            message.reply_text("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–í–∞—à–∏ –∑–∞–¥–∞—á–∏", callback_data="tasks_page:1")]])
            message.reply_text("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboard)
        else:
            message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è "–ú–æ–∏ –∑–∞–¥–∞—á–∏" –∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
        if message.text == "–ú–æ–∏ –∑–∞–¥–∞—á–∏":
            my_tasks(client, message)
        elif message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
            my_profile(client, message)
        else:
            message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")

# pagination_count
TASKS_PER_PAGE = 5

@app.on_message(filters.text & filters.regex("–ú–æ–∏ –∑–∞–¥–∞—á–∏"))
def my_tasks(client, message, page=1,user_id=None):
    if user_id==None:
        user_id = message.from_user.id
    offset = (page - 1) * TASKS_PER_PAGE
    tasks,total_tasks=utils_db.get_tasks(user_id,offset,TASKS_PER_PAGE)
    total_pages = (total_tasks + TASKS_PER_PAGE - 1) // TASKS_PER_PAGE
    if tasks:
        buttons = []
        for task in tasks:
            task_title = task['task_title']
            if task.get('done', False):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ç—É—Å "done"
                task_title += " ‚úÖ"  # –ï—Å–ª–∏ –¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ ‚úÖ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞—á–∏
            buttons.append([InlineKeyboardButton(task_title, callback_data=f"view_task:{task['unique_id']}")])
        if page > 1:
            buttons.append([InlineKeyboardButton("<<–ù–∞–∑–∞–¥", callback_data=f"tasks_page:{page-1}")])
        if page < total_pages:
            buttons.append([InlineKeyboardButton("–í–ø–µ—Ä–µ–¥>>", callback_data=f"tasks_page:{page+1}")])
        buttons.append([InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É",
                                             callback_data="create_task")])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"
        keyboard = InlineKeyboardMarkup(buttons)
        message.reply_text("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")]
            ]
        )
        message.reply_text("–ó–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=keyboard)


# pagination

@app.on_callback_query(filters.regex(r"tasks_page:(\d+)"))
def paginate_tasks(client, callback_query):
    page = int(re.match(r"tasks_page:(\d+)", callback_query.data).group(1))
    callback_query.message.delete()
    user_id = callback_query.from_user.id
    my_tasks(client, callback_query.message, page,user_id)

# Open task
@app.on_callback_query(filters.regex(r"view_task:(.+)"))
def view_task(client, callback_query):
    unique_id = re.match(r"view_task:(.+)", callback_query.data).group(1)
    user_id = callback_query.from_user.id
    task=utils_db.view_task(user_id,unique_id)
    if task:
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"delete_task:{unique_id}")],
                [InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω–∞‚úÖ", callback_data=f"done_task:{unique_id}")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º", callback_data=f"tasks_page:1")]
            ]
        )
        callback_query.message.edit_text(f"–ó–∞–¥–∞—á–∞: {task['task_title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {task['task_description']}", reply_markup=keyboard)

@app.on_callback_query(filters.regex(r"delete_task:(.+)"))
def delete_task(client, callback_query):
    unique_id = re.match(r"delete_task:(.+)", callback_query.data).group(1)
    user_id = callback_query.from_user.id
    utils_db.delete_task(user_id,unique_id)
    callback_query.message.edit_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
    my_tasks(client, callback_query.message, page=1,user_id=user_id)

@app.on_callback_query(filters.regex(r"done_task:(.+)"))
def delete_task(client, callback_query):
    unique_id = re.match(r"done_task:(.+)", callback_query.data).group(1)
    user_id = callback_query.from_user.id
    utils_db.task_done(unique_id)
    callback_query.message.edit_text("–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    my_tasks(client, callback_query.message, page=1, user_id=user_id)

@app.on_callback_query(filters.regex("create_task"))
def create_task_button(client, callback_query):
    import uuid
    user_id = callback_query.from_user.id
    unique_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    utils_db.update_temp_task(user_id, unique_id=unique_id)
    utils_db.update_stage(user_id, "get_task_title")
    callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")

if __name__ == "__main__":
    app.run()
